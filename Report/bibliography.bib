@phdthesis{rest,
  abstract = {The World Wide Web has succeeded in large part because its software
	architecture has been designed to meet the needs of an Internet-scale
	distributed hypermedia system. The Web has been iteratively developed
	over the past ten years through a series of modifications to the
	standards that define its architecture. In order to identify those
	aspects of the Web that needed improvement and avoid undesirable
	modifications, a model for the modern Web architecture was needed
	to guide its design, definition, and deployment.
	
	Software architecture research investigates methods for determining
	how best to partition a system, how components identify and communicate
	with each other, how information is communicated, how elements of
	a system can evolve independently, and how all of the above can be
	described using formal and informal notations. My work is motivated
	by the desire to understand and evaluate the architectural design
	of network-based application software through principled use of architectural
	constraints, thereby obtaining the functional, performance, and social
	properties desired of an architecture. An architectural style is
	a named, coordinated set of architectural constraints.
	
	This dissertation defines a framework for understanding software architecture
	via architectural styles and demonstrates how styles can be used
	to guide the architectural design of network-based application software.
	A survey of architectural styles for network-based applications is
	used to classify styles according to the architectural properties
	they induce on an architecture for distributed hypermedia. I then
	introduce the Representational State Transfer (REST) architectural
	style and describe how REST has been used to guide the design and
	development of the architecture for the modern Web.
	
	REST emphasizes scalability of component interactions, generality
	of interfaces, independent deployment of components, and intermediary
	components to reduce interaction latency, enforce security, and encapsulate
	legacy systems. I describe the software engineering principles guiding
	REST and the interaction constraints chosen to retain those principles,
	contrasting them to the constraints of other architectural styles.
	Finally, I describe the lessons learned from applying REST to the
	design of the Hypertext Transfer Protocol and Uniform Resource Identifier
	standards, and from their subsequent deployment in Web client and
	server software.},
  added-at = {2008-03-05T21:11:28.000+0100},
  author = {Fielding, Roy Thomas},
  biburl = {http://www.bibsonomy.org/bibtex/217b085721104f50d2f804bd1df197edc/gromgull},
  file = {Site:2000/Fielding2000Phd.pdf:PDF},
  interhash = {092ba78050ae9da156348ac20fccbd12},
  intrahash = {17b085721104f50d2f804bd1df197edc},
  keywords = {architecture rest},
  owner = {flint},
  school = {University of California, Irvine},
  timestamp = {2008-03-05T21:11:28.000+0100},
  title = {{REST:} Architectural Styles and the Design of Network-based Software Architectures},
  type = {Doctoral dissertation},
  url = {http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm},
  year = 2000
}

@ONLINE{CiD:culturalheritage,
	title = {What is Cultural Heritage},
	author={Culture in Development},
	url = {http://www.cultureindevelopment.nl/Cultural_Heritage/What_is_Cultural_Heritage}
}

@ONLINE{UNESCO:intro,
	title = {Introducing {UNESCO}: what we are},
	author={UNESCO},
	url = {http://www.unesco.org/new/en/unesco/about-us/who-we-are/introducing-unesco/},
	note = "[Online; accessed 10-September-2013]"
}

@ONLINE{UNESCO:worldheritage,
	title = {World Heritage List},
	author={UNESCO},
	url = {http://whc.unesco.org/en/list/},
	note = "[Online; accessed 10-September-2013]"
}

@ONLINE{Kulturarv,
	title = {Kulturarv},
	author={CodeUnited},
	url = {http://codeunited.dk/kulturarv/},
	note = "[Online; accessed 11-September-2013]"
}

@ONLINE{1001fort,
	title = {1001 fort√¶llinger om {D}anmark},
	author={Heritage Agency of Denmark},
	url = {http://www.kulturarv.dk/1001fortaellinger/},
	note = "[Online; accessed 11-September-2013]"
}

@ONLINE{phonegap,
	title = {Phone{G}ap},
	author={Adobe Systems Inc},
	url = {http://phonegap.com/about/},
	note = "[Online; accessed 06-October-2013]"
}

@misc{wikipedia:rest,
   author = "Wikipedia",
   title = "Representational state transfer --- {W}ikipedia{,} The Free Encyclopedia",
   year = "2004",
   url = "http://en.wikipedia.org/wiki/Representational_state_transfer",
   note = "[Online; accessed 06-October-2013]"
 }

@ONLINE{wikipedia:rest,
	url = {http://en.wikipedia.org/wiki/Representational_state_transfer}
}

@ONLINE{json,
	title = {Java{S}cript {O}bject {N}otation},
	url = {http://json.org/}
}

@ONLINE{sun,
	author = {Oracle corporation},
	title = {Oracle Buys {S}un},
	month = apr,
	year = {2009},
	url = {http://www.oracle.com/us/corporate/press/018363}
}

@ONLINE{mysql,
	author = {Oracle corporation},
	title = {Oracle Makes Commitments to Customers, Developers and Users of My{SQL}},
	month = dec,
	year = {2009},
	url = {http://www.oracle.com/us/corporate/press/042364}
}

@ONLINE{mysqlproducts,
	author = {Oracle corporation},
	title = {My{SQL} Editions},
	month = apr,
	year = {2009},
	url = {www.mysql.com/products/}
}

@ONLINE{wikipedia:waterfall,
	author = {Smith, Paul},
	title = {Waterfall model diagram},
	month = mar,
	year = {2009},
	url = {http://en.wikipedia.org/wiki/File:Waterfall_model_(1).svg}
}

@techreport{ieee829,
    abstract = {{A set of basic software test documents is described. This standard specifies the form and content of individual test documents. It does not specify the required set of test documents}},
    author = {IEEE Computer Society},
    booktitle = {IEEE Std 829-2008},
    journal = {IEEE Std 829-1998},
    priority = {2},
    title = {{IEEE standard for software test documentation}},
    url = {http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\&arnumber=4578383},
    year = {2008}
}

@techreport{ieee830,
    abstract = {{The content and qualities of a good software requirements specification (SRS) are described, and several sample SRS outlines are presented. This recommended practice is aimed at specifying the requirements of software to be developed, but can also be applied to assist in the selection of in-house and commercial software products. Guidelines for compliance with IEEE/EIA Std 12207.1-1997 are also provided}},
    author = {IEEE Computer Society},
    booktitle = {IEEE Std 830-1998},
    journal = {IEEE Std 830-1998},
    keywords = {documentation, dt, engineering, requirement, software},
    priority = {2},
    title = {{IEEE Recommended Practice for Software Requirements Specifications}},
    url = {http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\&arnumber=720574},
    year = {1998}
}

@article{Kruchten:1995:VMA:624610.625529,
	author = {Kruchten, Philippe},
	title = {The 4+1 View Model of Architecture},
	journal = {IEEE Softw.},
	issue_date = {November 1995},
	volume = {12},
	number = {6},
	month = nov,
	year = {1995},
	issn = {0740-7459},
	pages = {42--50},
	numpages = {9},
	url = {http://dx.doi.org/10.1109/52.469759},
	doi = {10.1109/52.469759},
	acmid = {625529},
	publisher = {IEEE Computer Society Press},
	address = {Los Alamitos, CA, USA},
}

@inproceedings{DBLP:conf/icse/Royce87,
	author    = {W. W. Royce},
	title     = {Managing the Development of Large Software Systems: Concepts and Techniques},
	booktitle = {ICSE},
	year      = {1987},
	pages     = {328-339},
	ee        = {http://dl.acm.org/citation.cfm?id=41801},
	crossref  = {DBLP:conf/icse/1987},
	bibsource = {DBLP, http://dblp.uni-trier.de}
}

@proceedings{DBLP:conf/icse/1987,
	editor    = {William E. Riddle and Robert M. Balzer and Kouichi Kishida},
	title     = {Proceedings, 9th International Conference on Software Engineering, Monterey, California, USA, March 30 - April 2, 1987},
	booktitle = {ICSE},
	publisher = {ACM Press},
	year      = {1987},
	isbn      = {0-89791-216-0},
	ee        = {http://dl.acm.org/citation.cfm?id=41765},
	bibsource = {DBLP, http://dblp.uni-trier.de}
}

@book{Sommerville10,
  abstract = {The book presents a broad perspective on software systems engineering, concentrating on widely used techniques for developing large-scale systems. Building on the widely acclaimed strengths of the 8th edition, the 9th edition updates readers with the latest developments in the field while remaining the most current Software Engineering text in the market with quality trusted coverage and practical case studies. This text is structured into 6 parts: Introduction; Requirements Engineering; Design; Software Development; Verification and Validation; Management. An up-to-date reference for software engineers.},
  added-at = {2012-05-30T11:07:40.000+0200},
  address = {Harlow, England},
  author = {Sommerville, Ian},
  biburl = {http://www.bibsonomy.org/bibtex/2094b37a4bb8b242d7694cdc9142e0d80/flint63},
  edition = 9,
  file = {Amazon Search inside:http\://www.amazon.de/gp/reader/0137035152/:URL;Google Books:http\://books.google.de/books?isbn=978-0-13-703515-1:URL},
  groups = {public},
  interhash = {3cb472cdd9d5e4f37480b38846de450e},
  intrahash = {094b37a4bb8b242d7694cdc9142e0d80},
  isbn = {978-0-13-703515-1},
  keywords = {v1205 book software engineering},
  publisher = {Addison-Wesley},
  timestamp = {2012-05-30T11:07:40.000+0200},
  title = {Software Engineering},
  username = {flint63},
  year = 2010
}
